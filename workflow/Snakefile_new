# 2023-10-17
#run micro-glmm from start to finish
pandb_dir=config["all"]["pandb_dir"]
output_fp=config["all"]["output_fp"]
centriod_cutoff=config["all"]["centriod_cutoff"]
data_dir_snp=config["all"]["data_dir_snp"]
data_dir_genes=config["all"]["data_dir_genes"]
metadata=config["all"]["metadata"]
genomes_file=config["all"]["geneome_file"]
genes_label_fp=config["all"]["genes_label_fp"]
verbose=config["all"]["verbose"]
SPECIES_IDs=config["all"]["SPECIES_IDs"]
centroid_prevalence_cutoff=config["all"]["centroid_prevalence_cutoff"]
num_samples=config["all"]["num_samples"]
abs_depth_snps=config["snps"]["abs_depth_snps"]
median_depth_snps=config["snps"]["median_depth_snps"]
median_depth_genes=config["genes"]["median_depth_genes"]
n_tau=config["snps"]["n_tau"]
run_qp=config["snps"]["run_qp"]
formula=config["snps"]["formula"]
SPA=config["genes"]["SPA"]
q_value=config["genes"]["q_value"]
n_CNV=config["snps"]["n_CNV"]
alpha_value=config["genes"]["alpha_value"]
rule parse_genes_input:
    input:
        gene_length = pandb_dir+ "/{s_id}/genes.len",
        gene_info = pandb_dir+ "/{s_id}/gene_info.txt",
    output:
        rep_genom = genes_label_fp +"/{s_id}." + centriod_cutoff + ".centroid_to_repgenes.tsv",
        centriod_counts= genes_label_fp +"/{s_id}." + centriod_cutoff + ".centroid_prevalence.tsv"

    shell:
        """
        mkdir -p {genes_label_fp}
        cd python
        python parse_gene.py --species_id {wildcards.s_id} \
        --pandb_dir {pandb_dir} --genome_info_file {genomes_file} \
        --out_dir {genes_label_fp} --by_col {centriod_cutoff}
        """
rule prep_snps:
    input:
        rep_genom =genes_label_fp +"/{s_id}." + centriod_cutoff + ".centroid_to_repgenes.tsv",
        centriod_counts= genes_label_fp +"/{s_id}." + centriod_cutoff + ".centroid_prevalence.tsv",
        gene_summary = data_dir_genes+"/{s_id}/genes/genes_summary.tsv",
        s_depth=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_depth.tsv",
        s_info=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_info.tsv",
        s_freq=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_freqs.tsv"
    output:
        GRM=output_fp+"/{s_id}.GRM.tsv"
    shell:
        """
        cd src
        Rscript prep_snps_command_line.R  --species_id {wildcards.s_id} \
        -v {verbose}  -o {output_fp}  -i {input.s_info}  \
        -f {input.s_freq}  -d {input.s_depth} -a {abs_depth_snps} -m {median_depth_snps}  -n {num_samples}  --genes_summary {input.gene_summary}\
        -c {input.rep_genom} -p {input.centriod_counts} --centroid_prevalence_cutoff {centroid_prevalence_cutoff}
        """


rule unzip_snps:
    input:
        s_depth_zip=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_depth.tsv.lz4",
        s_info_zip=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_info.tsv.lz4",
        s_freq_zip=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_freqs.tsv.lz4"
    output:
        s_depth=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_depth.tsv",
        s_info=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_info.tsv",
        s_freq=data_dir_snp+"/{s_id}/snps/{s_id}/{s_id}.snps_freqs.tsv"
    shell:
        """
        lz4 -d -m  {input.s_depth_zip}
        lz4 -d -m  {input.s_info_zip}
        lz4 -d -m  {input.s_freq_zip}
        """

rule unzip_genes:
    input:
        g_copy_zip=data_dir_genes+"/{s_id}/genes/{s_id}/{s_id}.genes_copynum.tsv.lz4",
        g_depth_zip=data_dir_genes+"/{s_id}/genes/{s_id}/{s_id}.genes_depth.tsv.lz4"
    output:
        g_copy=data_dir_genes+"/{s_id}/genes/{s_id}/{s_id}.genes_copynum.tsv",
        g_depth=data_dir_genes+"/{s_id}/genes/{s_id}/{s_id}.genes_depth.tsv"
    shell:
        """
        lz4 -d -m  {input.g_copy_zip}
        lz4 -d -m  {input.g_depth_zip}
        """

rule prep_genes:
    input:
        rep_genom =genes_label_fp +"/{s_id}." + centriod_cutoff + ".centroid_to_repgenes.tsv",
        centriod_counts= genes_label_fp +"/{s_id}." + centriod_cutoff + ".centroid_prevalence.tsv",
        g_copy=data_dir_genes+"/{s_id}/genes/{s_id}/{s_id}.genes_copynum.tsv",
        g_depth=data_dir_genes+"/{s_id}/genes/{s_id}/{s_id}.genes_depth.tsv",
        gene_summary = data_dir_genes+"/{s_id}/genes/genes_summary.tsv",
        metadata = metadata,
        GRM=output_fp+"/{s_id}.GRM.tsv"
    output:
        copynumber_data=output_fp+"/{s_id}.copynumber_data.csv"
    shell:
        """
        cd src
        Rscript prep_genes_command_line.R  --species_id {wildcards.s_id} \
        -v {verbose}  -o {output_fp}  --genes_summary {input.gene_summary}\
        -c {input.g_copy}  -d {input.g_depth}  --metadata {input.metadata}  \
        --GRM {input.GRM} -n {num_samples} -m {median_depth_genes} -p {input.centriod_counts} --centroid_prevalence_cutoff {centroid_prevalence_cutoff} --write_csv TRUE
        """



rule run_structure_test:
    input:
        GRM=output_fp+"/{s_id}.GRM.tsv",
        metadata = metadata
    output:
        Rdata=output_fp+"/{s_id}.model_obj.Rdata"
    shell:
        """
        cd src
        Rscript pop_structure_test_command_line.R --species_id {wildcards.s_id} -v {verbose} \
        -o {output_fp} --GRM {input.GRM} --metadata {input.metadata} --tau 1 --n_tau {n_tau}  --n_CNV {n_CNV}\
        --formula_to_fit {formula} --run_qp {run_qp}
        """

rule run_marker_test:
    input:
        Rdata=output_fp+"/{s_id}.model_obj.Rdata",
        copynumber_data=output_fp+"/{s_id}.copynumber_data.csv"
    output:
        marker_test=output_fp+"/{s_id}.marker_test.tsv"
    shell:
        """
        cd src
        Rscript marker_test_command_line.R --species_id {wildcards.s_id} -v {verbose} \
        -o {output_fp} --Rdata {input.Rdata} --copy_number {input.copynumber_data} \
        --SPA {SPA} --scale_copynumber TRUE --log_copynumber TRUE --q_value {q_value} --alpha_value {alpha_value}
        """

rule run_all:
    input:
        results=expand(output_fp+'/{s_id}.marker_test.tsv', s_id=SPECIES_IDs)
